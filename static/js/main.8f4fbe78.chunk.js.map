{"version":3,"sources":["components/FormComponent.tsx","components/TitleComponent.tsx","components/WeatherComponent.tsx","components/WeatherContainer.tsx","components/utils/wather-consts.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["FormComponent","props","className","onSubmit","getWeather","type","name","placeholder","TitleComponent","WeatherComponent","isResponseErrorFree","locationResult","error","length","city","description","humidity","temperature","WeatherContainer","useState","undefined","weather","setWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","data","main","temp","sys","style","border","marginTop","height","id","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","debug","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f4fbe78.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\ninterface IFormComponentProps {\r\n    getWeather: any\r\n}\r\n\r\nconst FormComponentFC: React.FC<IFormComponentProps> = (props: IFormComponentProps) => {\r\n\r\n    return (\r\n        <form className=\"col-12 mt-3\" onSubmit={props.getWeather}>\r\n            {/* CITY INPUT*/}\r\n            <input type=\"text\"\r\n                   name=\"city\"\r\n                   placeholder=\"Insert city\"\r\n            />\r\n\r\n            {/* COUNTRY INPUT*/}\r\n            <input type=\"text\"\r\n                   name=\"country\"\r\n                   placeholder=\"Inserisci country\"/>\r\n\r\n            {/* SUBMIT */}\r\n            <button className=\"text-uppercase\" type={'submit'}>Find</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const FormComponent = FormComponentFC\r\n","import * as React from 'react'\r\n\r\ninterface ITitleComponentProps {\r\n}\r\n\r\nconst TitleComponentFC: React.FC<ITitleComponentProps> = props => {\r\n\r\n    return (\r\n        <div className=\"mt-3\">\r\n            <h3 className=\"col-12 title-container__title\">1980's World Weather app</h3>\r\n            <h6 className=\"col-12 title-container__subtitle mt-2\">Get in real time weather, infos like conditions,\r\n                temperature\r\n                and\r\n                humidity!</h6>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TitleComponent = TitleComponentFC\r\n","import * as React from 'react'\r\nimport {IWeather} from './utils/weather-types'\r\nimport {LegendComponent} from './LegendComponent'\r\n\r\ninterface IWeatherComponentProps {\r\n    locationResult: IWeather\r\n}\r\n\r\nconst WeatherComponentFC: React.FC<IWeatherComponentProps> = (props: IWeatherComponentProps) => {\r\n\r\n    const {locationResult} = props\r\n\r\n    const isResponseErrorFree = locationResult.error.length\r\n\r\n    return <div className=\"container-fluid row\">\r\n\r\n        {/* RESULTS DATA */}\r\n        <div className=\"col-12 my-3 d-flex flex-column\">\r\n            {!isResponseErrorFree ?\r\n                <>\r\n                    <h6 className=\"font-weight-bold\"> Risultati:</h6>\r\n\r\n                    {/* LOCATION */}\r\n                    {props.locationResult.city &&\r\n                    <span>Location: <b>{props.locationResult.city}</b></span>}\r\n\r\n                    {/* DESCRIPTION */}\r\n                    {props.locationResult.description &&\r\n                    <span className=\"text-capitalize\">What's going on: <b>{props.locationResult.description}</b></span>}\r\n\r\n                    {/* HUMIDITY */}\r\n                    {props.locationResult.humidity &&\r\n                    <span>Humidity: <b>{props.locationResult.humidity}</b>%</span>}\r\n\r\n                    {/* TEMPERATURE */}\r\n                    {props.locationResult.temperature &&\r\n                    <span>Temperature: <b>{props.locationResult.temperature}</b>°</span>}\r\n                </>\r\n                :\r\n                <span className={'weather__error'}>\r\n                Errors during fetching data, chech if you insert city and country both.\r\n            </span>\r\n            }\r\n        </div>\r\n\r\n        {/* LEGEND */}\r\n        {!isResponseErrorFree && false && <LegendComponent/>}\r\n    </div>\r\n}\r\n\r\nexport const WeatherComponent = WeatherComponentFC\r\n","import * as React from 'react'\r\nimport {useState} from 'react'\r\nimport {FormComponent} from './FormComponent'\r\nimport {TitleComponent} from './TitleComponent'\r\nimport {WeatherComponent} from './WeatherComponent'\r\nimport {IWeather} from './utils/weather-types'\r\nimport {API_FETCH_KEY, FETCH_BASE_URL} from './utils/wather-consts'\r\n\r\ninterface IWeatherContainerJsProps {\r\n}\r\n\r\nconst WeatherContainerFC: React.FC<IWeatherContainerJsProps> = () => {\r\n\r\n    const [weather, setWeather] = useState<IWeather | undefined>(undefined)\r\n\r\n    const getWeather = async (e: any) => {\r\n        e.preventDefault()\r\n        const city = e.target.elements.city.value\r\n        const country = e.target.elements.country.value\r\n\r\n        const api_call = await fetch(`${FETCH_BASE_URL}${city},${country}&appid=${API_FETCH_KEY}&units=metric`)\r\n\r\n        const data = await api_call.json()\r\n\r\n        // console.debug('RESPONSE => ', data)\r\n\r\n        if (city && country) {\r\n            setWeather({\r\n                temperature: data?.main?.temp,\r\n                city: data?.name,\r\n                country: data?.sys?.country,\r\n                humidity: data.main?.humidity,\r\n                description: data?.weather[0]?.description,\r\n                error: ''\r\n            })\r\n        } else setWeather({\r\n            temperature: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            error: 'Città non trovata'\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container p-3\" style={{border: '2px dashed black', marginTop: 30, height: '100%'}}\r\n             id={'weather-container'}>\r\n\r\n            {/* TITLE */}\r\n            <TitleComponent/>\r\n\r\n            {/* FORM */}\r\n            <FormComponent getWeather={getWeather}/>\r\n\r\n            {/* WEATHER */}\r\n            {!!weather && <WeatherComponent locationResult={weather}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const WeatherContainer = WeatherContainerFC\r\n","export const API_FETCH_KEY = '53b8c510025423ce7d42791df96a29e2'\r\n\r\nexport const FETCH_BASE_URL = 'http://api.openweathermap.org/data/2.5/weather?q='\r\n","import * as React from 'react'\nimport './App.scss'\nimport {WeatherContainer} from './components/WeatherContainer'\n\ninterface IAppProps {\n}\n\nconst AppFC: React.FC<IAppProps> = (props) => {\n\n    return (\n        <div id={'main-container'} className={'container'}>\n\n            {/* WEATHER CONTAINER */}\n            <WeatherContainer/>\n\n        </div>\n    )\n}\n\nexport const App = AppFC\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.scss'\nimport * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport {App} from './App'\nimport {register} from './serviceWorker'\n\nconsole.debug('STARTING WEATHER APP')\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root') as HTMLElement\n)\n\nregister()\n"],"sourceRoot":""}